/* rxjs@6.6.3 */
import{h as e,o as r,a as t,O as n,S as o}from"./rxjs-shared.min.js";import{s as u,a as c}from"./rxjs-shared.min8.js";const s="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator",i=e=>e&&"number"==typeof e.length&&"function"!=typeof e;function a(e){return!!e&&"function"!=typeof e.subscribe&&"function"==typeof e.then}const d=n=>{if(n&&"function"==typeof n[r])return d=n,e=>{const t=d[r]();if("function"!=typeof t.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return t.subscribe(e)};if(i(n))return u(n);if(a(n))return c=n,r=>(c.then(e=>{r.closed||(r.next(e),r.complete())},e=>r.error(e)).then(null,e),r);if(n&&"function"==typeof n[s])return o=n,e=>{const r=o[s]();for(;;){let t;try{t=r.next()}catch(r){return e.error(r),e}if(t.done){e.complete();break}if(e.next(t.value),e.closed)break}return"function"==typeof r.return&&e.add(()=>{r.return&&r.return()}),e};{const e=t(n)?"an invalid object":`'${n}'`;throw new TypeError(`You provided ${e} where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.`)}var o,c,d};function f(e,t){if(null!=e){if(function(e){return e&&"function"==typeof e[r]}(e))return function(e,t){return new n(n=>{const u=new o;return u.add(t.schedule(()=>{const o=e[r]();u.add(o.subscribe({next(e){u.add(t.schedule(()=>n.next(e)))},error(e){u.add(t.schedule(()=>n.error(e)))},complete(){u.add(t.schedule(()=>n.complete()))}}))})),u})}(e,t);if(a(e))return function(e,r){return new n(t=>{const n=new o;return n.add(r.schedule(()=>e.then(e=>{n.add(r.schedule(()=>{t.next(e),n.add(r.schedule(()=>t.complete()))}))},e=>{n.add(r.schedule(()=>t.error(e)))}))),n})}(e,t);if(i(e))return c(e,t);if(function(e){return e&&"function"==typeof e[s]}(e)||"string"==typeof e)return function(e,r){if(!e)throw new Error("Iterable cannot be null");return new n(t=>{const n=new o;let u;return n.add(()=>{u&&"function"==typeof u.return&&u.return()}),n.add(r.schedule(()=>{u=e[s](),n.add(r.schedule((function(){if(t.closed)return;let e,r;try{const t=u.next();e=t.value,r=t.done}catch(e){return void t.error(e)}r?t.complete():(t.next(e),this.schedule())})))})),n})}(e,t)}throw new TypeError((null!==e&&typeof e||e)+" is not observable")}function l(e,r){return r?f(e,r):e instanceof n?e:new n(d(e))}export{f as a,l as f,s as i,d as s};
